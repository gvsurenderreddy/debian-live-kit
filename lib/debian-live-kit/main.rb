require 'optparse'

COMMANDS = {}

def check_opts *opts
  if opts[0].is_a?(Hash)
    passed = OPTIONS.keys
    bool = true
   
    passed.each do |o|
      if !opts[0][:with_opts].index(o)
	bool = false
	break
      end
    end
    
    bool
  else
    true
  end
end

def command name,*opts,&b
  COMMANDS[name] = proc do
    if check_opts(*opts)
      b.call
    else
      puts OPTION_PARSER
      puts "Command `#{name}` only accepts #{opts[0][:with_opts]}"
      exit(1)
    end
  end
end

OPTIONS = {}

OPTION_PARSER = OptionParser.new do |opt|
  opt.banner = "Usage: debian-live-kit [options]"
  opt.separator  ""
  opt.separator  "Synopsis"
  opt.separator  "     Tool to perform all or any action in making a debian-live-kit build"
  opt.separator  "     Takes a Porteus source and extracts the needed parts (boot., kernel, firmware),"
  opt.separator  "     then overlays a Debian filesystem over top. Resulting in a modular `Slax` like build of Debian"
  opt.separator  ""
  opt.separator  "     A working tree is required to perform actions"
  opt.separator  "     A tree is generated by any of the following:"
  opt.separator  "       debian-live-kit --all --iso /path/to/iso # Automatic everything"
  opt.separator  "       debian-live-kit --inflate --iso /path/to/iso && \\
          debian-live-kit --extract && \\
          debian-live-kit --init"
  opt.separator  "       debian-live-kit --import --source /path/to/build"
  opt.separator  ""  
  opt.separator  "Example 1: do everything and install to a pen drive"
  opt.separator  "     # This will perform the complete build process"
  opt.separator  "     debian-live-kit -a -p /path/to/porteus.iso"
  opt.separator  "     # This will make a bootable pen drive"
  opt.separator  "     debian-live-kit -P -s /dev/sdb1"
  opt.separator  ""
  opt.separator  "Example 2: import from a path"
  opt.separator  "     # This will inflate the working tree from the path specified"
  opt.separator  "     debian-live-kit -R -s /path/to/build"
  opt.separator  ""
  opt.separator  "Example 3: Using an existing tree"
  opt.separator  "     # use any of the action options"
  opt.separator  "     # --unpack,--pack,--pen,--modify"
  opt.separator  ""  
  opt.separator  "Options"

  opt.on("-e","--extract","extract needed from porteus") do
    OPTIONS[:extract] = true
  end

  opt.on("-p","--inflate","inflate a porteus iso") do
    OPTIONS[:inflate] = true
  end  
  
  opt.on("-a","--all","run it all") do
    OPTIONS[:all] = true
  end
  
  opt.on("-U","--unpack","Imports a debian base from target into the work tree") do
    OPTIONS[:unpack] = true
  end
  
  opt.on("-Z","--pack","Packs the debian base into the target") do
    OPTIONS[:pack] = true
  end  

  opt.on("-m","--modify","CHROOT into base and pack it up \n#{" "*37}(may need to perform --import or --unpack if no tree\n#{" "*37}(ie, a full clean was performed))") do
    OPTIONS[:modify] = true
  end  
  
  opt.on("-R","--import","imports a a build") do
    OPTIONS[:import] = true
  end    
  
  opt.on("-t TARGET","--target=TARGET","set the target to other than default") do |target|
    OPTIONS[:target] = target
  end
  
  opt.on("-l ISO","--iso=ISO","specify the porteus compat iso to extract from") do |iso|
    OPTIONS[:iso] = iso
  end  
  
  opt.on("-a","--all","run it all") do
    OPTIONS[:all] = true
  end
  
  opt.on("-i","--init","intiailizes the base system") do
    OPTIONS[:init] = true
  end  
  
  opt.on("-c","--clean","perform full clean") do
    OPTIONS[:clean] = true
  end 
  
  opt.on("-Q","--info","print some configurations") do
    OPTIONS[:info] = true
  end      
  
  opt.on("-P","--pen","Make a bootable pen from work tree") do
    OPTIONS[:pen] = true
  end   
  
  opt.on("-s SOURCE","--source=SOURCE","the SOURCE to use (only with [-P, --pen])") do |path|
    OPTIONS[:source] = path
  end       
  
  opt.on("-d DEVICE","--device=DEVICE","set the device to perform on, (only with [-P, --pen])") do |device|
    OPTIONS[:device] = device
  end  
  
  opt.on("-b PATH","--splash=PATH","set the splash image, (only with [-f, --finalize, -a, --all])") do |img|
    OPTIONS[:splash] = File.expand_path(img)
  end     
  
  opt.on("-f","--finalize","finalize the tree") do
    OPTIONS[:finalize] = true
  end        
  
  opt.on("-h","--help","help") do
    puts OPTION_PARSER
    exit(1)
  end
end

OPTION_PARSER.parse!
